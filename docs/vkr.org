#+STARTUP: latexpreview
#+TITLE: Разработка сайта для автоматического сбора, анализа и визуализации информации по этичности компаний
#+AUTHOR: Соломатин Роман Игоревич
#+LANGUAGE: ru
#+LATEX_CLASS: HSEUniversity
#+LATEX_CLASS_OPTIONS: [PI, VKR]
#+cite_export: biblatex
#+OPTIONS: toc:nil H:4 ':t
#+LATEX_HEADER: \supervisor{к.т.н.}{доцент кафедры информационных технологий в бизнесе НИУ ВШЭ-Пермь}{А. В. Бузмаков}
#+LATEX_HEADER: \Abstract{В данной работе проведен анализ этичности разных компаний.
#+LATEX_HEADER:
#+LATEX_HEADER: В первой главе находится описание используемых алгоримов.
#+LATEX_HEADER:
#+LATEX_HEADER: Во второй главе представлено проектирование системы.
#+LATEX_HEADER:
#+LATEX_HEADER: В третьей главе представлена реализация системы.
#+LATEX_HEADER:
#+LATEX_HEADER: В четвертой главе представлено тестирование работы системы.
#+LATEX_HEADER:
#+LATEX_HEADER: Количество страниц -- \pageref*{pg:end}, количество иллюстраций -- \TotalValue{totalfigures}, количетсво таблиц -- \TotalValue{totaltables}.
#+LATEX_HEADER: }

#+COMMENT: Написать аннотацию. Как-то сделать ограничения (упор) на отзывы клиентов

* Введение
:PROPERTIES:
:UNNUMBERED: t
:END:
Этика компаний – это разделяемые всеми сотрудниками организации правила и нормы, ценности и убеждения, манера общения и другие факторы, которые регламентируют поведение и взаимодействии членов компании. Существует 3 уровня этики компаний[cite:@smirnova_biznesetika_2021]:
1. мировой -- отвечает за увеличение общественного благосостояния, обеспечение рабочих мест, научно-технические инновации и модернизацию производственных процессов и т. д.
2. макроуровень -- отвечает за принципы рыночной конкуренции, информационной прозрачность и равнодоступности для всех участников рынка и т. д.
3. микроуровне -- отвечает за доверие и отсутствие дискриминации в отношениях между контрагентами, между сотрудниками и менеджерами, морально-нравственный климат в организации и т. д.
В данной работе будет рассматриваться этика на микроуровне.

Этичность компаний уже давно вызывает озабоченность, особенно их поведение в спорных ситуациях и предоставление услуг, ориентированных на клиента. В последние годы все большее внимание уделяется оценке этичности компаний[cite:@mure_esg_2021; @semenko_korporativnaya_2022; @kudryavceva_korporativnosocialnaya_2016], особенно в банковском секторе и через призму экологических, социальных и управленческих факторов (ESG). Необходимость в таких оценках становится все более острой по мере того, как общество продолжает бороться с последствиями неправомерных действий корпораций и более широким воздействием корпоративной деятельности на общество и окружающую среду.

В настоящее время существует несколько сервисов, которые призваны оценивать этику компании на основании финансовых показателей[fn:1] и судебных дел[fn:2]. Это привело к ситуации, когда отдельные лица должны проводить свои собственные исследования, чтобы определить насколько этична компания. Это часто включает в себя просмотр отзывов с различных веб-сайтов, что может занять много времени и не всегда может дать исчерпывающую или точную картину, так как не включает в себя качество обслуживания.

Для решения этой проблемы реализована система, которая собирает и анализирует отзывы потребителей с различных веб-сайтов, чтобы дать более полную и точную оценку этической практики компании. Затем собранные данные анализируются с помощью различных методов, таких как обработка естественного языка и машинного обучения, для выявления закономерностей и тенденций, связанных с этической практикой компании. Полученный анализ может быть использован для разработки более надежной и достоверной системы оценки этичности компаний.

Объект исследования – взаимодействие компаний с клиентами.

Предмет исследования – программные средства для оценки этичности на основе взаимодействия компаний с клиентами.

Цель работы – создание системы для оценки этичности компаний.

Исходя из поставленной цели, необходимо:

1. Провести анализ предметной области и требований
3. Реализовать систему
4. Провести тестирование системы

Этап анализа должен:
1. Анализ предметной области
2. Анализ требований к системе
3. Анализ существующих алгоритмов

Этап проектирования должен включать:
1. Проектирование серверной части
2. Проектирование модели для определения этичности
3. Проектирование клиентской части приложения

Этап реализации должен включать:
1. Описание сбора данных
2. Реализации модели
3. Реализации серверной части
4. Реализации клиентской части

Этап тестирования должен включать:
1. Тестирование модели
2. Тестирование серверной части
3. Тестирование клиентской части

В ходе выполнения анализа, проектирования и реализации приложения используется объектно-ориентированный подход. Результаты анализа и решения задач проектирования формализуются с помощью диаграмм =UML=. При разработке базы данных используется реляционная СУБД =PostgreSQL=, а серверная часть приложения реализуется на языке python с помощью фреймворка =FastApi=, а алгоритмы анализы текста будут использовать методы машинного обучения.
* Анализ предметной области
В данной главе представлен аналитический обзор оценок этичности компаний и алгоритмов машинного обучения, а также обзор существующих программных решений для поставленной проблемы.

Анализ предметной области следует разделить на следующие пункты:
1. анализ процесса определения этичности компаний сейчас позволяет понять, как этот процесс сейчас происходит и как его лучше всего автоматизировать;
2. анализ оценок этичности компаний для того, чтобы в дальнейшем определить этичность компаний;
3. анализ существующих решений выполняется с целью выделения их сильных и слабых сторон по отношению к решаемой проблеме и обоснования необходимости разработки нового средства, подходящего под регламент задач;
4. анализ алгоритмов позволяет понять с помощью каких алгоритмов можно найти полезную информацию в текстах;
5. анализ требований к системе позволит выделить функциональные и не функциональные требования.
** Анализ определения этичности компании
Сейчас процесс поиска этичной компании выгладит следующим образом: сначала ищутся компании, которые предоставляют желаемые услуги. Далее они изучаются, чтобы определить их этичность. Этот процесс включает в себя:
1. просмотр отчетности компании
2. анализ ее финансовой деятельности
3. изучение информации о социальной ответственности

Для этого они обращаются к различным источникам информации, таким как веб-сайты компаний, рейтинговые агентства, исследовательские организации и другие источники. Потом, изучаются социальные сети компании или отзывы пользователей на разных сайтах, форумах и социальных сетях, чтобы получить дополнительную информацию и оценить общее мнение о компании. После изучения каждой компании люди выбирают ту, которую они считают наиболее этичной и социально ответственной. Блок-схема данного поиска рис. [[ref:fig:as_is]]. Важным фактором для определения этичности компании может быть ее социальная ответственность, устойчивость бизнеса и соблюдение норм и стандартов в области финансовой деятельности.

В целом, процесс поиска компаний и определения их этичности может быть длительным и требует серьезного подхода. Люди могут использовать различные источники информации, чтобы сделать осознанный выбор и инвестировать свои деньги в компанию, которая соответствует их ожиданиям и требованиям.
#+begin_src mermaid :file img/mermaid/as_is.png :results output :theme neutral
flowchart TD
    direction TB
    A[Поиск компаний, которые предоставляют желаемые услуги]
    A --> B[Составление списка компаний, которые предоставляют услуги]
    B --> C
    subgraph search[ ]
        C{{Изучение каждой компании}}
        C --> D[Просмотр отчетности]
        D --> E[Изучение соцсетей компании]
        E --> F[Просмотр отзывов на разный сайтах]
        F --> C
    end
    F --> G[Выбор компании]
#+end_src

#+NAME: fig:as_is
#+CAPTION: Диаграмма того, как сейчас происходит поиск компании
#+ATTR_LATEX: :width 0.6\textwidth :placement [h]
#+RESULTS:
[[file:img/mermaid/as_is.png]]

** Анализ оценок этичности компаний
Оценка этики компании -- это не одноразовый процесс, а скорее непрерывная попытка понять и оценить действия, политику и практику компании с течением времени. Это включает в себя рассмотрение соблюдения компанией отраслевых этических стандартов и передовой практики, а также мониторинг любых изменений в этической позиции компании с течением времени. Кроме того, участие в диалоге с компанией и консультации с организациями, специализирующимися на оценке корпоративной ответственности могут дать ценную информацию об этических практиках компании.

Компаниям важно оставаться этичными, так как на долгосрочной перспективе это приносит большую прибыль и улучшает показатели бизнеса, чем неэтичный способ ведение бизнеса[cite:@climent_ethical_2018; @mure_esg_2021]. Насколько этична компания можно рассматривать с двух сторон, самой компании и их клиентов. Со стороны компаний можно выделить факторы, которые можно получить из их отчетности:
- количество капитала, чтобы они не могли обанкротиться;
- какое влияние они вносят на окружающую среду;
- куда идут инвестиции[cite:@harvey_ethical_1995].
#+COMMENT: метрики качества сервисов, как сравнивать
Для пользователей одними из ключевых факторов можно выделить:
- качество пользовательского сервиса[cite:@brunk_exploring_2010], как правило пользователи оставляют отзывы на сайтах по 5-ти бальной шкале;
- насколько навязчивые услуги компании[cite:@mitchell_bank_1992], как правило пользователи оставляют отзывы на сайтах по 5-ти бальной шкале.

#+COMMENT: ????? отчетность компаний
В данной работе этичность компаний будет определяться по отзывам клиентов, которые освещают проблемы качества услуг и качество сервиса, и на основе отчетности компаний, что позволит полностью осветить проблему. Для анализа текстов будут использоваться алгоритмы машинного обучения.
** Анализ существующих решений
Существует несколько индексов, предназначенных для измерения этичности -- индекс Доу Джонса (DJSI)[cite:@lopez_sustainable_2007] и FTSE4GOOD[cite:@collison_financial_2008].

DJSI оценивает показатели устойчивости компаний различных секторов на основе экономических, экологических и социальных критериев. Компании отбираются на основе их показателей по сравнению с аналогичными компаниями в том же секторе. Процесс оценки включает в себя тщательную оценку компаний по различным критериям, включая корпоративное управление, экологический менеджмент, трудовую практику, права человека и социальные вопросы.

Аналогичным образом, индекс FTSE4GOOD предназначен для оценки деятельности компаний, которые демонстрируют эффективную практику экологического, социального и управленческого менеджмента (ESG). Компании отбираются на основе их практики ESG и оцениваются по различным критериям, включая изменение климата, права человека и корпоративное управление.

Индексы DJSI и FTSE4GOOD разработаны для того, чтобы помочь инвесторам определить компании, которые привержены этической практике. Эти индексы предоставляют инвесторам стандартизированный способ сравнения компаний на основе их показателей. Это помогает инвесторам принимать более обоснованные инвестиционные решения и побуждает компании внедрять устойчивую практику для привлечения инвестиций.

Для российских компаний нет аналогичных индексов. Сейчас данные об этичности компаний можно получить из агрегаторов отзывов и отчётности. Агрегаторы позволяют собрать информацию о клиентском обслуживании, а отчетность компаний о положении дел в целом. Но сейчас не существует способов, как можно оценить все вместе.
#+COMMENT: Расисать, чем не устраивают
** Алгоритмы для анализа текста
#+COMMENT: 42 мин. Откуда вооб  ще появляются алгоритмы
Алгоритмы машинного обучения для анализа текста получили широкое распространение для извлечения информации из неструктурированных данных с помощью больших помеченных наборов данных. Среди различных используемых методов несколько алгоритмов оказались особенно эффективными в этой области. К ним относятся мешок слов[cite:@harris_distributional_1954], TF-IDF[cite:@jones_karen_sparck_statistical_1972], Word2Vec[cite:@mikolov_distributed_2013], ELMO[cite:@peters_deep_2018], GPT[cite:@radford_language_2019] и BERT[cite:@devlin_bert_2019]. Каждый из этих алгоритмов обладает уникальными характеристиками, которые делают их хорошо подходящими для определенных приложений.

Модель "Мешок слов" представляет текстовые данные путем присвоения уникального номера каждому слову в документе. Этот метод прост в реализации, но не учитывает порядок слов в предложении. С другой стороны, модель TF-IDF представляет текстовые данные, учитывая как частоту слова в документе (TF), так и его редкость во всех документах корпуса (IDF). Этот подход может быть использован для определения важности слова в данном документе и обычно используется в задачах поиска информации и обработки естественного языка, но он не понимает контекста слов.

Word2Vec использует векторное представление слов, что позволяет алгоритму улавливать значение слов в сходных контекстах. Это позволяет более точно и изощренно представлять взаимосвязи между словами, что приводит к повышению производительности в таких задачах, как классификация текста и анализ настроений.

ELMO, GPT и BERT, с другой стороны, основаны на архитектуре трансформеров, в которой каждое предложение представлено вектором чисел, обычно известным как вложение. Такое представление позволяет получить более полное и целостное понимание текста, поскольку оно учитывает контекст всего предложения или текста.

Из этих алгоритмов BERT считается наиболее продвинутым и мощным, поскольку он способен учитывать контекст всего предложения или текста, в то время как GPT и ELMO рассматривают только односторонний контекст. Это позволяет BERT достигать самых современных результатов в широком спектре задач анализа естественного языка.

Таблица результата сравнения моделей [[tbl:model_compare]].

#+NAME: tbl:model_compare
#+CAPTION: Сравнение моделей
#+ATTR_LATEX: :align |c|c|c| :placement [h!]
|------------+-------------------------------+------------------|
| Модель     | Вектор слов                   | Контекст         |
|------------+-------------------------------+------------------|
| Мешок слов | зависит от количества слов    | нет              |
|------------+-------------------------------+------------------|
| TF-IDF     | зависит от количества слов    | очень слабо      |
|------------+-------------------------------+------------------|
| Word2Vec   | не зависит от количества слов | слабо            |
|------------+-------------------------------+------------------|
| ELMO       | не зависит от количества слов | однонаправленный |
|------------+-------------------------------+------------------|
| GPT        | не зависит от количества слов | однонаправленный |
|------------+-------------------------------+------------------|
| BERT       | не зависит от количества слов | двунаправленный  |
|------------+-------------------------------+------------------|

*** BERT
BERT [cite:@devlin_bert_2019] (Bidirectional Encoder Representations from Transformers) -- это нейросетевая языковая модель, которая относится к классу трансформеров. Она состоит из 12 «базовых блоков» (слоев), а на каждом слое 768 параметров.

На вход модели подается предложение или пара предложений. Затем разделяется на отдельные слова (токены). Потом в начало последовательности токенов вставляется специальный токен =[CLS]=, обозначающий начало предложения или начало последовательности предложений. Пары предложений группируются в одну последовательность и разделяются с помощью специального токена =[SEP]=, затем к каждому токену добавляется эмбеддинг, показывающий к какому предложению относится токен. Потом все токены превращаются в эмбеддинги [[fig:inputemebeddings]] по механизму описаному в работе [cite:@vaswani_attention_2017].

#+CAPTION: Пример ввода текста в модель
#+NAME: fig:inputemebeddings
#+ATTR_LATEX: :placement [h]
[[file:img/Input_Emebeddings.pdf]]

При обучении модель выполняет на 2 задания:
 1) Предсказание слова в предложении

    Поскольку стандартные языковые модели либо смотрят текст слева направо или справа налево [[fig:BERT_comparisons]], как ELMo[cite:@peters_deep_2018] и GPT[cite:@radford_language_2019], они не подходят под некоторые типы заданий. Так как BERT двунаправленный, у каждого слова можно посмотреть его контекст, что позволит предсказать замаскированное слово.

    #+CAPTION: Сравнение принципов работы BERT, ELMo, GPT
    #+NAME: fig:BERT_comparisons
    #+ATTR_LATEX: :placement [h]
    [[file:img/BERT_comparisons.pdf]]

    Это задание обучается следующим образом -- 15% случайных слов заменяются в каждом предложении на специальный токен =[MASK]=, а затем предсказываются на основании контекста. Однако иногда слова заменяются не на специальны токена, в 10% заменяются на случайный токен и еще в 10% заменяются на случайное слово.

 2) Предсказание следующего предложения

    Для того чтобы обучить модель, которая понимает отношения предложений, она предсказывает, идут ли предложения друг за другом. Для этого с 50% вероятностью выбирают предложения, которые находятся рядом и наоборот. Пример ввода пары предложений в модель [[fig:bert_pretrainin]].

    #+CAPTION: Схемам работы BERT
    #+NAME: fig:bert_pretrainin
    #+ATTR_LATEX: :width 0.6\textwidth :placement [hbp]
    [[file:img/bert_pretrainin.png]]
*** Sentence BERT
Sentense BERT [cite:@reimers_sentence-bert_2019] -- это модификация предобученных моделей BERT, которая использует 2 модели BERT, затем усреднят их выходы, а после с помощью функции ошибки выдаёт результат. Схема работы модели [[ref:fig:sbert]].
#+CAPTION: Схема работы SBERT
#+NAME: fig:sbert
#+ATTR_LATEX: :width 0.6\textwidth :placement [h!]
[[file:img/sbert.png]]
Основное преимущество данной модели над классическим BERT: эмбеддинги предложений можно сравнивать друг с другом независимо и не пересчитывать их пару каждый раз. Например, если для поиска похожих предложений из 10000 для обычного BERT потребуется 50 миллионов вычислений различных пар предложений, и это займёт 50 часов, то Sentense BERT рассчитает эмбеддинг каждого предложения отдельно, потом их сравнит. Такой способ рассчета ускоряет работу программы до 5 секунд.
** Анализ требований к системе
Исходя из интервью с пользователями система должна уметь:
1. Показывать историю изменений индекса с возможностью фильтровать по:
   1. годам;
   2. отраслям компаний, с возможностью множественного выбора;
   3. компаниям, с возможностью множественного выбора;
   4. моделям, с возможностью множественного выбора;
   5. источникам, с возможностью множественного выбора.
2. Агрегировать значения индекса по годам и кварталам;
3. Анализировать тексты для построения индекса этичности;
4. Иметь возможность добавления анализа текста несколькими вариантами;
5. Сохранять тексты для последующего анализа другими методами;
6. Система должна собирать данные с сайтов banki.ru, sravni.ru и комментарии из групп "вконтаке";
7. На сайте должен быть график, который показывать изменение индекса этичности компаний.

На основе описания функциональных требований была создана диаграмма вариантов использования, которая представлена на рисунке [[ref:fig:usecasefull]].
#+NAME: fig:usecasefull
#+CAPTION: Диаграмма вариантов использования
#+ATTR_LATEX: :placement [h!] :width \textwidth
[[file:img/use-case.png]]

Также были получены нефункциональные требования:
1. построение графика не должно занимать больше секунды;
2. данные должны собираться автоматически;
3. данные должны обрабатываться автоматически;
4. система должны способна работать с большим объемом информации;
5. система должна быть стабильна.
** Выбор технологий для разработки
Для реализации этой системы будет использоваться язык Python. Для этого языка разработано много библиотек, которые позволят быстро реализовать нейротропные алгоритмы обработки естественного языка, в частности в этом проекте будет использоваться Pytorch[cite:@paszke_pytorch_2019] и HuggingFace[cite:@wolf_transformers_2020], и собирать данные с сайтов. Для реализации API будет использоваться FastAPI, что позволит разрабатывать API с автоматической документацией.

Хранение данных будет использоваться объектно-реляционная система управления базами данных PostgreSQL, что позволит обрабатывать большие объемы данных. Для работы с ней будет использоваться Code first подход, с помощью Python библиотек Sqlalchemy и Alembic для изменения схемы данных (миграций).

Для клиентской части приложения будет использоваться библиотека React.
** Выводы главы
По итогам анализа предметной области, можно сделать вывод о том, что определение этичности компаний является важной задачей, которую можно автоматизировать с помощью алгоритмов машинного обучения. Анализ оценок этичности компаний позволяет понять, какие факторы необходимо учитывать при разработке алгоритмов. Обзор существующих решений показал, что некоторые из них имеют свои преимущества и недостатки, и может потребоваться разработка нового средства, учитывающего особенности задачи. Анализ алгоритмов помогает выбрать наиболее подходящие алгоритмы для поиска полезной информации в текстах. Наконец, анализ требований к системе позволяет определить необходимые функциональные и нефункциональные требования, которые будут учитываться при разработке решения. В целом, эти аналитические пункты помогут определить оптимальный подход к решению задачи определения этичности компаний.
* Проектирование системы
В данной главе определена общая архитектура системы и каждого микросервиса, осуществлено проектирование баз данных, API микросервисов для модуля анализа для универсальной рекомендательной системы.
** Проектирование архитектуры системы
Система будет разделена на отдельные независимые компоненты (микросервисы), что позволит ей быть надежной, если в какой-то части системы будут сбои, то остальная часть системы продолжит работать, и масштабируемой, легко добавлять новые компоненты. Каждый микросервис системы будет представлять собой docker container, которые будут управляться с помощью docker compose. Каждый сервис будет реализовывать отдельный компонент бизнес-логики и коммуницировать с другими компонентами через HTTP API.

Было выделено 5 главных компонента бизнес логики:
1. Работа с базой данных -- это HTTP API, который обеспечивает возможность сохранения и получения данных из базы данных. Данный компонент принимает запросы на сохранение данных, получение информации из базы данных и возвращает результаты обработки этих запросов.
2. Сбор данных -- компонент, который отвечает за сбор информации с нескольких источников. Для этого используется несколько независимых сборщиков данных, которые работают с различными сайтами и другими источниками.
3. Обработка данных -- данный компонент содержит несколько моделей, которые используются для анализа данных. Эти модели производят различные виды анализа, от простой фильтрации и сортировки до более сложных операций анализа и прогнозирования.
4. Агрегирование данных -- этот компонент отвечает за агрегацию обработанных данных в единый индекс. Данный индекс может быть использован для удобного представления полученных результатов в виде отчетов и графиков.
5. Сайт -- этот компонент будет отображать агрегированную информацию.

Результат архитектуры системы на рис. [[ref:fig:architecture]].

#+NAME: fig:architecture
#+CAPTION: Диаграмма архитектуры системы
#+ATTR_LATEX: :placement [h!] :width 0.8\textwidth
[[file:img/architecture.png]]

Сервис для работы с базой данных, который будет обеспечивать сохранение и получение информации из различных сервисов сбора и обработки данных, а также сайтов. Для этого будет предоставлен API, который будет использоваться для отправки и получения данных.

Сервисы сбора данных будут отправлять собранные тексты в формате JSON на сервис работы с базой данных с помощью HTTP запросов. Кроме того, информация, необходимая для сбора данных, будет храниться в базах данных соответствующих сервисов.

Сервис агрегации данных будет периодически обновлять базу данных один раз в день для обеспечения актуальности данных.

Сервис сбора данных будет включать несколько моделей машинного обучения, которые будут использоваться для анализа данных, полученных из сервиса сбора данных. После обработки данных, результаты будут отправляться обратно в сервис сбора данных.

Сайт будет получать данные из сервиса работы с базой данных.
** Проектирование базы данных
*** Проектирование основной базы данных
На основании требований была разработана следующая схема базы данных:

Таблица сфер компаний, чтобы можно было фильтровать различные сферы компаний и смотреть как меняется этичность сферы в целом.

#+ATTR_LATEX: :environment longtblr :options caption={Таблица сфера компании},label={tbl:company_type} :align colspec={|X[2,l]|X[1,l]|X[3,l]|},rowhead = 1,hlines :position [h!]
| *Название*       | *Тип*    | *Описание*                 |
| Идентификатор  | Целое  | Уникальный идентификатор |
| Сфера компании | Строка |                          |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица компании},label={tbl:companies} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*           | *Тип*    | *Описание*                                                                 |
| Идентификатор      | Целое  | Уникальный идентификатор                                                 |
| Название компании  | Строка |                                                                          |
| Описание компании  | Строка | Дополнительное поле для сохранения вспомогательной информации о компании |
| Лицензия компании  | Строка | По лицензии компаний может будет сопоставлять компании на разных сайтах  |
| Код сферы компании | Целое  | Внешний ключ из таблицы Сфера компании                                   |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица тип источников},label={tbl:source_type} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*                | *Тип*    | *Описание*                 |
| Идентификатор           | Целое  | Уникальный идентификатор |
| Название типа источника | Строка |                          |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица источники},label={tbl:sources} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*                  | *Тип*      | *Описание*                                                         |
| Идентификатор             | Целое    | Уникальный идентификатор                                         |
| Сайт                      | Строка   | Сайт источника                                                   |
| Код типа источника        | Целое    | Внешний ключ из таблицы тип источника                            |
| Состояние сборщика данных | JSON     | Данные о текущем состояние сборщика данных, если возникнет сбой  |
| Дата последнего сбора     | DateTime | Точка когда сбор данных закончился, для дальнейшего сбора данных |

#+ATTR_LATEX: :environment longtblr :options caption={Таблицы текст},label={tbl:text} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*                | *Тип*      | *Описание*                          |
| Идентификатор           | Целое    | Уникальный идентификатор          |
| Ссылка                  | Строка   | Ссылка на текст                   |
| Код источника           | Целое    | Внешний ключ из таблицы источники |
| Дата текста             | DateTime | Время публикации текста           |
| Заголовок               | Строка   | Заголовок текста                  |
| Код компании            | Целое    | Внешний ключ на компанию          |
| Количество комментариев | Целое    |                                   |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица тип модели},label={tbl:model_type} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*        | *Тип*    | *Описание*                 |
| Идентификатор   | Целое  | Уникальный идентификатор |
| Название модели | Строка |                          |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица модели},label={tbl:model} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*        | *Тип*    | *Описание*                           |
| Идентификатор   | Целое  | Уникальный идентификатор           |
| Название модели | Строка |                                    |
| Код типа модели | Целое  | Внешний ключ на таблицу тип модели |

Так как Bert на вход принимает отдельные предложения, было решено сделать для них отдельную таблицу.

#+ATTR_LATEX: :environment longtblr :options caption={Таблица предложений},label={tbl:sentence} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*          | *Тип*    | *Описание*                              |
| Идентификатор     | Целое  | Уникальный идентификатор              |
| Код текста        | Целое  | Внешний ключ из таблицы тексты        |
| Предложение       | Строка |                                       |
| Номер предложения | Целое  | Порядковый номер предложения в тексте |

#+ATTR_LATEX: :environment longtblr :options caption={Таблица результатов анализа текстов},label={tbl:text_result} :align colspec={|X[l]|X[l]|X[l]|},rowhead = 1,hlines :position [h!]
| *Название*        | *Тип*                 | *Назначение*                                    |
| Идентификатор   | Целое               | Уникальный идентификатор                      |
| Код предложения | Целое               | Внешний ключ из таблицы предложения           |
| Код модели      | Целое               | Внешний ключ из таблицы модели                |
| Результат       | Вещественный массив | Результат работы модели                       |
| Обработано      | Логическое          | Показатель, обработано ли предложение или нет |

*** Проектирование таблицы для агрегации
** Проектирование серверной части
*** Модуль сбора данных
*** Модуль обработки данных
*** Модуль агрегации данных
** Проектирование клиентской части
* Реализация системы
** Реализация серверной части
*** Реализация API
*** Реализация парсера banki.ru
*** Реализация парсера sravni.ru
*** Реализация модуля обработки текста
*** Дообучение модели
** Реализация клиентской части
* Тестирование системы
* Заключение
:PROPERTIES:
:UNNUMBERED: t
:END:
#+LATEX: \putbibliography
#+LATEX: \appendix
#+LATEX: \include{tz}
* Схема базы данных
#+begin_src d2 :exports results :file img/d2/database.png
aggregate_table_model_result: {
  shape: sql_table

  id: integer {constraint: primary_key}
  year: integer
  quater: integer
  model_name: varchar
  source_site: varchar
  source_type: varchar
  bank_name: varchar
  neutral: integer
  positive: integer
  negative: integer
  total: integer
  bank_id: integer
  index_base: double precision
  index_mean: double precision
  index_std: double precision
  index_safe: double precision
  # index_base_10_percentile: double precision
  # index_base_90_percentile: double precision
  # index_mean_10_percentile: double precision
  # index_mean_90_percentile: double precision
  # index_std_10_percentile: double precision
  # index_std_90_percentile: double precision
  # index_safe_10_percentile: double precision
  # index_safe_90_percentile: double precision
}

bank: {
  shape: sql_table

  id: integer {constraint: primary_key}
  bank_name: varchar
  description: varchar
  bank_type_id: integer {constraint: foreign_key}
  licence: varchar
}

bank_type: {
  shape: sql_table

  id: integer {constraint: primary_key}
  name: varchar
}
model: {
  shape: sql_table

  id: integer {constraint: primary_key}
  name: varchar
  model_type_id: integer {constraint: foreign_key}
}
model_type: {
  shape: sql_table

  id: integer {constraint: primary_key}
  model_type: varchar
}
source: {
  shape: sql_table

  id: integer {constraint: primary_key}
  site: varchar
  source_type_id: integer {constraint: foreign_key}
  parser_state: JSON
  last_update: timestamp
}
source_type: {
  shape: sql_table

  id: integer {constraint: primary_key}
  name: varchar
}
text: {
  shape: sql_table

  id: integer {constraint: primary_key}
  link_: varchar
  source_id: integer {constraint: foreign_key}
  date: timestamp
  title: varchar
  bank_id: integer {constraint: foreign_key}
  comment_num: integer
}
text_result: {
  shape: sql_table

  id: integer {constraint: primary_key}
  text_sentence_id: integer {constraint: foreign_key}
  model_id: integer {constraint: foreign_key}
  result: double precision\[\]
  is_processed: boolean
}
text_reviews_count: {
  shape: sql_table

  id: integer {constraint: primary_key}
  date: timestamp
  quarter: integer
  source_site: varchar
  source_type: varchar
  count_reviews: integer
}
text_sentence: {
  shape: sql_table

  id: integer {constraint: primary_key}
  text_id: integer {constraint: foreign_key}
  sentence: varchar
  sentence_num: integer
}

bank -> bank_type: bank_type_id
model -> model_type: model_type_id
source -> source_type: source_type_id
text -> bank: bank_id
text -> source: source_id
text_result -> model: model_id
text_result -> text_sentence: text_sentence_id
text_sentence -> text: text_id
#+end_src

#+CAPTION: Схема базы данных
#+NAME: fig:database
#+ATTR_LATEX: :placement [h!] :width 0.8\textwidth
#+RESULTS:
[[file:img/d2/database.png]]

#+begin_src mermaid :exports none
classDiagram
direction BT
class aggregate_table_model_result {
   integer year
   integer quater
   varchar model_name
   varchar source_site
   varchar source_type
   varchar bank_name
   integer neutral
   integer positive
   integer negative
   integer total
   integer bank_id
   double precision index_base
   double precision index_mean
   double precision index_std
   double precision index_safe
   double precision index_base_10_percentile
   double precision index_base_90_percentile
   double precision index_mean_10_percentile
   double precision index_mean_90_percentile
   double precision index_std_10_percentile
   double precision index_std_90_percentile
   double precision index_safe_10_percentile
   double precision index_safe_90_percentile
   integer id
}
class alembic_version {
   varchar(32) version_num
}
class bank {
   varchar bank_name
   varchar description
   integer bank_type_id
   varchar licence
   integer id
}
class bank_type {
   varchar name
   integer id
}
class model {
   varchar name
   integer model_type_id
   integer id
}
class model_type {
   varchar model_type
   integer id
}
class source {
   varchar site
   integer source_type_id
   varchar parser_state
   timestamp last_update
   integer id
}
class source_type {
   varchar name
   integer id
}
class text {
   varchar link
   integer source_id
   timestamp date
   varchar title
   integer bank_id
   integer comment_num
   integer id
}
class text_result {
   integer text_sentence_id
   integer model_id
   double precision[] result
   boolean is_processed
   integer id
}
class text_reviews_count {
   timestamp date
   integer quarter
   varchar source_site
   varchar source_type
   integer count_reviews
   integer id
}
class text_sentence {
   integer text_id
   varchar sentence
   integer sentence_num
   integer id
}

aggregate_table_model_result  -->  bank : bank_id:id
bank  -->  bank_type : bank_type_id:id
model  -->  model_type : model_type_id:id
source  -->  source_type : source_type_id:id
text  -->  bank : bank_id:id
text  -->  source : source_id:id
text_result  -->  model : model_id:id
text_result  -->  text_sentence : text_sentence_id:id
text_sentence  -->  text : text_id:id

#+end_src
* Footnotes
[fn:1] https://kontur.ru/expert, https://www.esphere.ru/products/spk/financial
[fn:2] https://proverki.gov.ru/portal/public-search
